name: MLflow CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      n_estimators:
        description: 'Number of estimators'
        required: false
        default: '100'
        type: string
      max_depth:
        description: 'Maximum depth'
        required: false
        default: '20'
        type: string
      min_samples_split:
        description: 'Minimum samples split'
        required: false
        default: '5'
        type: string
      min_samples_leaf:
        description: 'Minimum samples leaf'
        required: false
        default: '2'
        type: string

env:
  DOCKER_IMAGE_NAME: avocado-ripeness-model
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}

jobs:
  mlflow-training:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        
    - name: Install Miniconda
      uses: conda-incubator/setup-miniconda@v3
      with:
        auto-update-conda: true
        python-version: '3.10'
        miniforge-variant: Miniforge3
        channels: conda-forge,nodefaults
        channel-priority: strict
        
    - name: Install MLflow
      shell: bash -l {0}
      run: |
        # Configure conda channels explicitly
        conda config --remove channels defaults || true
        conda config --add channels conda-forge
        conda config --set channel_priority strict
        
        # Update conda
        conda update -n base -c conda-forge conda -y
        
        # Install system dependencies
        sudo apt-get update
        sudo apt-get install -y jq
        
        # Install MLflow with retries
        for i in {1..3}; do
          echo "Attempt $i: Installing MLflow..."
          if conda install -c conda-forge mlflow scikit-learn pandas numpy matplotlib seaborn -y; then
            echo "‚úÖ MLflow and dependencies installed successfully"
            break
          else
            echo "‚ùå Attempt $i failed, retrying..."
            sleep 10
          fi
        done
        
        # Install additional MLflow dependencies via pip
        pip install mlflow[extras] --no-cache-dir
        
        # Verify installation
        mlflow --version
        python -c "import mlflow; print(f'MLflow version: {mlflow.__version__}')"
        
    - name: Install Docker
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKER_HUB_USERNAME }}
        password: ${{ env.DOCKER_HUB_PASSWORD }}
        
    - name: Run MLflow Project
      shell: bash -l {0}
      working-directory: ./MLProject
      run: |
        # Set parameters from workflow inputs or use defaults
        N_ESTIMATORS=${{ github.event.inputs.n_estimators || '100' }}
        MAX_DEPTH=${{ github.event.inputs.max_depth || '20' }}
        MIN_SAMPLES_SPLIT=${{ github.event.inputs.min_samples_split || '5' }}
        MIN_SAMPLES_LEAF=${{ github.event.inputs.min_samples_leaf || '2' }}
        
        echo "Running MLflow project with parameters:"
        echo "n_estimators: $N_ESTIMATORS"
        echo "max_depth: $MAX_DEPTH"
        echo "min_samples_split: $MIN_SAMPLES_SPLIT"
        echo "min_samples_leaf: $MIN_SAMPLES_LEAF"
        
        # Clean up any existing MLflow database and runs to avoid schema conflicts
        echo "üßπ Cleaning up existing MLflow artifacts..."
        rm -f mlflow.db
        rm -rf mlruns
        
        # Set MLflow tracking URI with absolute path (database will be created automatically on first run)
        echo "üóÑÔ∏è Setting up MLflow tracking..."
        MLFLOW_DB_PATH="$(pwd)/mlflow.db"
        export MLFLOW_TRACKING_URI="sqlite:///$MLFLOW_DB_PATH"
        
        # Verify MLflow configuration
        echo "‚úÖ MLflow tracking URI set to: $MLFLOW_TRACKING_URI"
        mlflow --version
        
        # Verify dataset exists
        if [ ! -f "avocado_ripeness_dataset_preprocessed.csv" ]; then
          echo "‚ùå Error: Dataset file not found!"
          exit 1
        fi
        
        # Verify MLProject file exists
        if [ ! -f "MLProject" ]; then
          echo "‚ùå Error: MLProject file not found!"
          exit 1
        fi
        
        echo "‚úÖ All required files present"
        
        # Run the MLflow project with error handling and explicit tracking URI
        echo "üöÄ Starting MLflow run..."
        MLFLOW_TRACKING_URI="$MLFLOW_TRACKING_URI" mlflow run . \
          -P n_estimators=$N_ESTIMATORS \
          -P max_depth=$MAX_DEPTH \
          -P min_samples_split=$MIN_SAMPLES_SPLIT \
          -P min_samples_leaf=$MIN_SAMPLES_LEAF \
          --env-manager conda || {
            echo "‚ùå MLflow run failed!"
            echo "Checking for logs..."
            ls -la
            if [ -d "mlruns" ]; then
              echo "MLflow runs directory contents:"
              find mlruns -name "*.log" -exec cat {} \; 2>/dev/null || echo "No log files found"
            fi
            # Additional debugging: check database state
            echo "üîç Database status:"
            if [ -f "mlflow.db" ]; then
              echo "Database file exists: $(ls -lh mlflow.db)"
              file mlflow.db 2>/dev/null || echo "Could not determine file type"
            else
              echo "Database file not found"
            fi
            echo "üîç MLflow version:"
            mlflow --version
            echo "üîç Tracking URI:"
            echo "MLFLOW_TRACKING_URI=$MLFLOW_TRACKING_URI"
            exit 1
          }
        
        echo "‚úÖ MLflow run completed successfully"
        
        # Export the tracking URI for subsequent steps
        echo "MLFLOW_TRACKING_URI=$MLFLOW_TRACKING_URI" >> $GITHUB_ENV
        
    - name: Build Docker Image with MLflow
      shell: bash -l {0}
      working-directory: ./MLProject
      run: |
        # Set the tracking URI for this step
        MLFLOW_DB_PATH="$(pwd)/mlflow.db"
        export MLFLOW_TRACKING_URI="sqlite:///$MLFLOW_DB_PATH"
        
        # Verify MLflow runs exist
        if [ ! -d "mlruns" ]; then
          echo "‚ùå Error: No MLflow runs found!"
          exit 1
        fi
        
        # Get the latest run ID with better error handling
        echo "üîç Looking for latest MLflow run..."
        
        # Try to get run ID using different methods
        RUN_ID=""
        
        # Method 1: Try with mlflow CLI
        if command -v mlflow >/dev/null 2>&1; then
          RUN_ID=$(mlflow runs list --experiment-name "Avocado_Ripeness_Classification" --max-results 1 --order-by "attribute.start_time DESC" --output-format json 2>/dev/null | jq -r '.[0].run_id' 2>/dev/null || echo "")
        fi
        
        # Method 2: Fallback to filesystem search if jq/mlflow failed
        if [ -z "$RUN_ID" ] || [ "$RUN_ID" = "null" ]; then
          echo "üîÑ Fallback: Searching mlruns directory..."
          # Find the most recent run directory
          RUN_ID=$(find mlruns -name "meta.yaml" -type f -printf '%T@ %p\n' 2>/dev/null | sort -n | tail -1 | awk '{print $2}' | sed 's|.*/\([^/]*\)/meta.yaml|\1|' || echo "")
        fi
        
        if [ -z "$RUN_ID" ] || [ "$RUN_ID" = "null" ]; then
          echo "‚ùå Error: Could not find any MLflow run ID!"
          echo "üìÅ MLruns directory contents:"
          find mlruns -type f -name "meta.yaml" 2>/dev/null | head -10
          exit 1
        fi
        
        echo "‚úÖ Latest run ID: $RUN_ID"
        
        # Verify model artifacts exist
        MODEL_PATH="runs:/$RUN_ID/model"
        echo "üîç Checking model artifacts for run: $RUN_ID"
        
        # Build Docker image using mlflow build-docker with error handling
        echo "üê≥ Building Docker image..."
        
        if MLFLOW_TRACKING_URI="$MLFLOW_TRACKING_URI" mlflow models build-docker \
          -m "$MODEL_PATH" \
          -n "$DOCKER_HUB_USERNAME/$DOCKER_IMAGE_NAME:latest" \
          --enable-mlserver; then
          echo "‚úÖ Docker image built successfully"
        else
          echo "‚ùå Docker build failed!"
          echo "üîç Checking model artifacts..."
          
          # Try to list model artifacts for debugging
          MLFLOW_TRACKING_URI="$MLFLOW_TRACKING_URI" mlflow artifacts list -u "$MODEL_PATH" 2>/dev/null || echo "Could not list model artifacts"
          
          # Check if model directory exists in mlruns
          if [ -d "mlruns" ]; then
            echo "üìÅ MLruns structure:"
            find mlruns -name "model" -type d 2>/dev/null | head -5
          fi
          
          exit 1
        fi
        
    - name: Tag and Push Docker Image
      shell: bash -l {0}
      run: |
        # Verify Docker image exists before pushing
        if docker images | grep -q "$DOCKER_HUB_USERNAME/$DOCKER_IMAGE_NAME"; then
          echo "‚úÖ Docker image found, proceeding with tag and push..."
          
          # Tag with commit SHA
          docker tag "$DOCKER_HUB_USERNAME/$DOCKER_IMAGE_NAME:latest" "$DOCKER_HUB_USERNAME/$DOCKER_IMAGE_NAME:${{ github.sha }}"
          
          # Push both tags with retry mechanism
          echo "üöÄ Pushing latest tag..."
          for i in {1..3}; do
            if docker push "$DOCKER_HUB_USERNAME/$DOCKER_IMAGE_NAME:latest"; then
              echo "‚úÖ Latest tag pushed successfully"
              break
            else
              echo "‚ùå Push attempt $i failed, retrying..."
              sleep 10
            fi
          done
          
          echo "üöÄ Pushing SHA tag..."
          for i in {1..3}; do
            if docker push "$DOCKER_HUB_USERNAME/$DOCKER_IMAGE_NAME:${{ github.sha }}"; then
              echo "‚úÖ SHA tag pushed successfully"
              break
            else
              echo "‚ùå Push attempt $i failed, retrying..."
              sleep 10
            fi
          done
          
          echo "‚úÖ Docker images pushed successfully!"
          echo "Latest: $DOCKER_HUB_USERNAME/$DOCKER_IMAGE_NAME:latest"
          echo "SHA: $DOCKER_HUB_USERNAME/$DOCKER_IMAGE_NAME:${{ github.sha }}"
        else
          echo "‚ùå Docker image not found! Skipping push step."
          echo "Available images:"
          docker images
          exit 1
        fi
        
    - name: Save Model Artifacts
      shell: bash -l {0}
      working-directory: ./MLProject
      run: |
        # Set the tracking URI for this step
        MLFLOW_DB_PATH="$(pwd)/mlflow.db"
        export MLFLOW_TRACKING_URI="sqlite:///$MLFLOW_DB_PATH"
        
        # Create artifacts directory
        mkdir -p ../artifacts
        
        # Get the latest run ID with better error handling
        RUN_ID=""
        
        # Method 1: Try with mlflow CLI and jq
        if command -v mlflow >/dev/null 2>&1 && command -v jq >/dev/null 2>&1; then
          RUN_ID=$(MLFLOW_TRACKING_URI="$MLFLOW_TRACKING_URI" mlflow runs list --experiment-name "Avocado_Ripeness_Classification" --max-results 1 --order-by "attribute.start_time DESC" --output-format json 2>/dev/null | jq -r '.[0].run_id' 2>/dev/null || echo "")
        fi
        
        # Method 2: Fallback to filesystem search
        if [ -z "$RUN_ID" ] || [ "$RUN_ID" = "null" ]; then
          echo "üîÑ Fallback: Searching mlruns directory..."
          RUN_ID=$(find mlruns -name "meta.yaml" -type f -printf '%T@ %p\n' 2>/dev/null | sort -n | tail -1 | awk '{print $2}' | sed 's|.*/\([^/]*\)/meta.yaml|\1|' || echo "")
        fi
        
        if [ -z "$RUN_ID" ] || [ "$RUN_ID" = "null" ]; then
          echo "‚ùå Error: Could not find any MLflow run ID!"
          echo "üìÅ MLruns directory contents:"
          find mlruns -type f -name "meta.yaml" 2>/dev/null | head -10
          exit 1
        fi
        
        echo "Copying artifacts from run: $RUN_ID"
        
        # Copy MLflow artifacts
        if [ -d "mlruns" ]; then
          cp -r mlruns ../artifacts/
        fi
        
        # Copy database
        if [ -f "mlflow.db" ]; then
          cp mlflow.db ../artifacts/
        fi
        
        # Copy any generated plots or additional files
        if [ -f "confusion_matrix.png" ]; then
          cp confusion_matrix.png ../artifacts/
        fi
        
        if [ -f "feature_importance.png" ]; then
          cp feature_importance.png ../artifacts/
        fi
        
        # Create a summary file
        echo "MLflow Run Summary" > ../artifacts/run_summary.txt
        echo "==================" >> ../artifacts/run_summary.txt
        echo "Run ID: $RUN_ID" >> ../artifacts/run_summary.txt
        echo "Timestamp: $(date)" >> ../artifacts/run_summary.txt
        echo "Commit SHA: ${{ github.sha }}" >> ../artifacts/run_summary.txt
        echo "Docker Image: $DOCKER_HUB_USERNAME/$DOCKER_IMAGE_NAME:${{ github.sha }}" >> ../artifacts/run_summary.txt
        echo "MLflow Tracking URI: $MLFLOW_TRACKING_URI" >> ../artifacts/run_summary.txt
        
        # List artifacts
        echo "Generated artifacts:" >> ../artifacts/run_summary.txt
        ls -la ../artifacts/ >> ../artifacts/run_summary.txt
        
    - name: Upload Artifacts to GitHub
      uses: actions/upload-artifact@v4
      with:
        name: mlflow-artifacts-${{ github.sha }}
        path: artifacts/
        retention-days: 30
        
    - name: Commit and Push Artifacts (if on main branch)
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      shell: bash -l {0}
      run: |
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Create artifacts branch if it doesn't exist
        git fetch origin
        if git show-ref --verify --quiet refs/remotes/origin/artifacts; then
          git checkout artifacts
          git pull origin artifacts
        else
          git checkout --orphan artifacts
          git rm -rf .
        fi
        
        # Copy artifacts
        cp -r artifacts/* . 2>/dev/null || :
        
        # Add timestamp directory
        TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
        mkdir -p "runs/$TIMESTAMP"
        cp -r artifacts/* "runs/$TIMESTAMP/" 2>/dev/null || :
        
        # Commit and push
        git add .
        git commit -m "Add MLflow artifacts from run ${{ github.sha }}" || echo "No changes to commit"
        git push origin artifacts
        
    - name: Update Docker Hub Link
      shell: bash -l {0}
      run: |
        # Update the docker-hub-link.txt with the new image
        echo "https://hub.docker.com/repository/docker/$DOCKER_HUB_USERNAME/$DOCKER_IMAGE_NAME" > MLProject/docker-hub-link.txt
        echo "Latest image: $DOCKER_HUB_USERNAME/$DOCKER_IMAGE_NAME:latest" >> MLProject/docker-hub-link.txt
        echo "SHA image: $DOCKER_HUB_USERNAME/$DOCKER_IMAGE_NAME:${{ github.sha }}" >> MLProject/docker-hub-link.txt
        
    - name: Display Run Summary
      shell: bash -l {0}
      run: |
        echo "üéâ MLflow CI/CD Pipeline Completed Successfully!"
        echo "=============================================="
        echo "‚úÖ Model training completed"
        echo "‚úÖ Docker image built and pushed to Docker Hub"
        echo "‚úÖ Artifacts saved to GitHub repository"
        echo ""
        echo "üìä Run Details:"
        echo "Docker Image: $DOCKER_HUB_USERNAME/$DOCKER_IMAGE_NAME:latest"
        echo "Commit SHA: ${{ github.sha }}"
        echo "Workflow URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        echo ""
        echo "üîó Resources:"
        echo "- Docker Hub: https://hub.docker.com/repository/docker/$DOCKER_HUB_USERNAME/$DOCKER_IMAGE_NAME"
        echo "- Artifacts: Available in GitHub Actions artifacts and 'artifacts' branch"