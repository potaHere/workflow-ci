name: MLflow Model Training CI

# Trigger workflow
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Memungkinkan trigger manual
    inputs:
      n_estimators:
        description: 'Number of trees in Random Forest'
        required: false
        default: '100'
        type: string
      max_depth:
        description: 'Maximum depth of trees'
        required: false
        default: '20'
        type: string
      min_samples_split:
        description: 'Minimum samples required to split a node'
        required: false
        default: '5'
        type: string
      min_samples_leaf:
        description: 'Minimum samples required at leaf node'
        required: false
        default: '2'
        type: string

jobs:
  model-training:
    runs-on: ubuntu-latest
    
    steps:
    # Step 1: Checkout repository
    - name: Checkout repository
      uses: actions/checkout@v4
      
    # Step 2: Setup Python environment
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    # Step 3: Setup Miniconda untuk MLflow Project
    - name: Setup Miniconda
      uses: conda-incubator/setup-miniconda@v3
      with:
        auto-update-conda: true
        python-version: '3.10'
        environment-file: MLProject/conda.yaml
        activate-environment: avocado_ripeness_env
        
    # Step 4: Install MLflow
    - name: Install MLflow
      shell: bash -l {0}
      run: |
        conda activate avocado_ripeness_env
        pip install mlflow
        
    # Step 5: Setup MLflow tracking server (optional - menggunakan local filesystem)
    - name: Setup MLflow tracking
      shell: bash -l {0}
      run: |
        export MLFLOW_TRACKING_URI=file://$(pwd)/mlruns
        echo "MLFLOW_TRACKING_URI=file://$(pwd)/mlruns" >> $GITHUB_ENV
        
    # Step 6: Validate dataset exists
    - name: Check dataset availability
      run: |
        if [ ! -f "MLProject/avocado_ripeness_dataset_preprocessed.csv" ]; then
          echo "Dataset not found!"
          exit 1
        fi
        echo "Dataset found successfully"
        
    # Step 7: Run MLflow Project untuk training
    - name: Run MLflow Project Training
      shell: bash -l {0}
      run: |
        conda activate avocado_ripeness_env
        cd MLProject
        
        # Set parameters dari input atau default
        N_ESTIMATORS=${{ github.event.inputs.n_estimators || '100' }}
        MAX_DEPTH=${{ github.event.inputs.max_depth || '20' }}
        MIN_SAMPLES_SPLIT=${{ github.event.inputs.min_samples_split || '5' }}
        MIN_SAMPLES_LEAF=${{ github.event.inputs.min_samples_leaf || '2' }}
        
        echo "Training with parameters:"
        echo "n_estimators: $N_ESTIMATORS"
        echo "max_depth: $MAX_DEPTH"
        echo "min_samples_split: $MIN_SAMPLES_SPLIT"
        echo "min_samples_leaf: $MIN_SAMPLES_LEAF"
        
        # Run MLflow project
        mlflow run . \
          -P n_estimators=$N_ESTIMATORS \
          -P max_depth=$MAX_DEPTH \
          -P min_samples_split=$MIN_SAMPLES_SPLIT \
          -P min_samples_leaf=$MIN_SAMPLES_LEAF
          
    # Step 8: Upload model artifacts
    - name: Upload MLflow artifacts
      uses: actions/upload-artifact@v4
      with:
        name: mlflow-artifacts
        path: |
          mlruns/
          MLProject/models/
          MLProject/*.png
        retention-days: 30
        
    # Step 9: Generate training report
    - name: Generate Training Report
      shell: bash -l {0}
      run: |
        conda activate avocado_ripeness_env
        cd MLProject
        
        echo "# MLflow Training Report - $(date)" > training_report.md
        echo "" >> training_report.md
        echo "## Training Parameters" >> training_report.md
        echo "- N Estimators: ${{ github.event.inputs.n_estimators || '100' }}" >> training_report.md
        echo "- Max Depth: ${{ github.event.inputs.max_depth || '20' }}" >> training_report.md
        echo "- Min Samples Split: ${{ github.event.inputs.min_samples_split || '5' }}" >> training_report.md
        echo "- Min Samples Leaf: ${{ github.event.inputs.min_samples_leaf || '2' }}" >> training_report.md
        echo "" >> training_report.md
        echo "## Workflow Information" >> training_report.md
        echo "- Trigger: ${{ github.event_name }}" >> training_report.md
        echo "- Branch: ${{ github.ref_name }}" >> training_report.md
        echo "- Commit: ${{ github.sha }}" >> training_report.md
        echo "- Timestamp: $(date)" >> training_report.md
        
        # Cari experiment terbaru
        if [ -d "../mlruns" ]; then
          echo "" >> training_report.md
          echo "## MLflow Experiments" >> training_report.md
          echo "MLflow experiments have been logged successfully." >> training_report.md
          echo "Check the artifacts for detailed metrics and model files." >> training_report.md
        fi
        
    # Step 10: Upload training report
    - name: Upload Training Report
      uses: actions/upload-artifact@v4
      with:
        name: training-report
        path: MLProject/training_report.md
        retention-days: 30
        
    # Step 11: Model validation (optional)
    - name: Basic Model Validation
      shell: bash -l {0}
      run: |
        conda activate avocado_ripeness_env
        cd MLProject
        
        # Check if model files were created
        if [ -d "models" ] && [ "$(ls -A models)" ]; then
          echo "✅ Model files created successfully"
          ls -la models/
        else
          echo "❌ No model files found"
          exit 1
        fi
        
        # Check MLflow runs
        if [ -d "../mlruns" ] && [ "$(ls -A ../mlruns)" ]; then
          echo "✅ MLflow experiments logged successfully"
        else
          echo "❌ No MLflow experiments found"
          exit 1
        fi
        
    # Step 12: Build and Push Docker Image to Docker Hub
    - name: Build MLflow Docker Image
      shell: bash -l {0}
      run: |
        conda activate avocado_ripeness_env
        cd MLProject
        
        # Install docker dependencies
        pip install docker
        
        # Build docker image using MLflow
        mlflow models build-docker \
          --model-uri "models:/avocado_ripeness_model/latest" \
          --name "avocado-ripeness-model" \
          --install-mlflow || echo "Building from run artifacts instead..."
        
        # Alternative: Build from local model artifacts
        if [ -d "models" ]; then
          echo "Building Docker image from local model artifacts..."
          # Get the latest model directory
          LATEST_MODEL=$(ls -t models/ | head -n1)
          if [ ! -z "$LATEST_MODEL" ]; then
            mlflow models build-docker \
              --model-uri "models/$LATEST_MODEL" \
              --name "avocado-ripeness-model" \
              --install-mlflow
          fi
        fi
        
    # Step 13: Login to Docker Hub
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    # Step 14: Tag and Push Docker Image
    - name: Tag and Push Docker Image
      shell: bash -l {0}
      run: |
        # Get Docker Hub username from secrets
        DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
        
        # Tag the image
        docker tag avocado-ripeness-model:latest $DOCKERHUB_USERNAME/avocado-ripeness-model:latest
        docker tag avocado-ripeness-model:latest $DOCKERHUB_USERNAME/avocado-ripeness-model:v$(date +%Y%m%d-%H%M%S)
        
        # Push to Docker Hub
        docker push $DOCKERHUB_USERNAME/avocado-ripeness-model:latest
        docker push $DOCKERHUB_USERNAME/avocado-ripeness-model:v$(date +%Y%m%d-%H%M%S)
        
        echo "✅ Docker image pushed successfully!"
        echo "🐳 Image: $DOCKERHUB_USERNAME/avocado-ripeness-model:latest"
        
    # Step 15: Update Training Report with Docker Info
    - name: Update Training Report with Docker Info
      shell: bash -l {0}
      run: |
        conda activate avocado_ripeness_env
        cd MLProject
        
        DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
        
        echo "" >> training_report.md
        echo "## Docker Image" >> training_report.md
        echo "- Docker Hub Repository: $DOCKERHUB_USERNAME/avocado-ripeness-model" >> training_report.md
        echo "- Latest Tag: latest" >> training_report.md
        echo "- Versioned Tag: v$(date +%Y%m%d-%H%M%S)" >> training_report.md
        echo "- Pull Command: \`docker pull $DOCKERHUB_USERNAME/avocado-ripeness-model:latest\`" >> training_report.md
        echo "" >> training_report.md
        echo "### Usage" >> training_report.md
        echo "\`\`\`bash" >> training_report.md
        echo "# Pull and run the model container" >> training_report.md
        echo "docker pull $DOCKERHUB_USERNAME/avocado-ripeness-model:latest" >> training_report.md
        echo "docker run -p 8080:8080 $DOCKERHUB_USERNAME/avocado-ripeness-model:latest" >> training_report.md
        echo "\`\`\`" >> training_report.md
        
  # Job untuk notifikasi (optional)
  notify-completion:
    runs-on: ubuntu-latest
    needs: model-training
    if: always()
    
    steps:
    - name: Training Status
      run: |
        if [[ "${{ needs.model-training.result }}" == "success" ]]; then
          echo "🎉 Model training completed successfully!"
          echo "✅ Status: SUCCESS"
        else
          echo "❌ Model training failed!"
          echo "❌ Status: FAILED"
          exit 1
        fi