name: MLflow CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      n_estimators:
        description: 'Number of estimators'
        required: false
        default: '100'
        type: string
      max_depth:
        description: 'Maximum depth'
        required: false
        default: '20'
        type: string
      min_samples_split:
        description: 'Minimum samples split'
        required: false
        default: '5'
        type: string
      min_samples_leaf:
        description: 'Minimum samples leaf'
        required: false
        default: '2'
        type: string

env:
  DOCKER_IMAGE_NAME: avocado-ripeness-model
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}

jobs:
  mlflow-training:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ github.token }}
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        
    - name: Install Miniconda
      uses: conda-incubator/setup-miniconda@v3
      with:
        auto-update-conda: true
        python-version: '3.10'
        miniforge-variant: Miniforge3
        channels: conda-forge,nodefaults
        channel-priority: strict
        
    - name: Install MLflow
      shell: bash -l {0}
      run: |
        python -m pip install --upgrade pip
        pip install mlflow scikit-learn pandas numpy matplotlib seaborn
        
    - name: Train Model with MLflow Project
      working-directory: ${{ github.workspace }}/MLProject
      shell: bash -l {0}
      run: |
        # Set the tracking URI for this step
        MLFLOW_DB_PATH="$(pwd)/mlflow.db"
        export MLFLOW_TRACKING_URI="sqlite:///$MLFLOW_DB_PATH"
        
        # Create artifacts directory
        mkdir -p ../artifacts
        
        # Install jq for JSON parsing
        sudo apt-get update -qq && sudo apt-get install -qq -y jq
        
        # Install required packages in the conda environment
        conda env update -f conda.yaml
        conda activate avocado_ripeness_env
        # Create a file to store the run ID
        touch run_id.txt
        
        # Run the model training and capture the run ID directly from the output
        echo "üöÄ Training model with MLflow..."
        python modelling.py \
          --n_estimators ${{ github.event.inputs.n_estimators || '100' }} \
          --max_depth ${{ github.event.inputs.max_depth || '20' }} \
          --min_samples_split ${{ github.event.inputs.min_samples_split || '5' }} \
          --min_samples_leaf ${{ github.event.inputs.min_samples_leaf || '2' }} | tee training.log
        
        # Extract the run ID directly from the output log
        RUN_ID=$(grep -o "Training completed! MLflow Run ID: [a-zA-Z0-9]*" training.log | cut -d ' ' -f 6)
        
        # Verify we got a run ID
        if [ -z "$RUN_ID" ]; then
          echo "‚ùå Error: Could not find MLflow Run ID in training output!"
          echo "üìë Training log contents:"
          cat training.log
          
          # As a fallback, try with mlflow CLI and jq
          if command -v mlflow >/dev/null 2>&1 && command -v jq >/dev/null 2>&1; then
            RUN_ID=$(MLFLOW_TRACKING_URI="$MLFLOW_TRACKING_URI" mlflow runs list --experiment-name "Avocado_Ripeness_Classification" --max-results 1 --order-by "attribute.start_time DESC" --output-format json 2>/dev/null | jq -r '.[0].run_id' 2>/dev/null || echo "")
            
            if [ -n "$RUN_ID" ] && [ "$RUN_ID" != "null" ]; then
              echo "‚úÖ Found Run ID via MLflow CLI: $RUN_ID"
            else
              echo "‚ùå Could not find Run ID via MLflow CLI"
            fi
          fi
          
          # If still no Run ID, exit with error
          if [ -z "$RUN_ID" ] || [ "$RUN_ID" = "null" ]; then
            echo "‚ùå Error: Failed to retrieve MLflow Run ID by any method"
            exit 1
          fi
        fi
        
        echo "Found MLflow Run ID: $RUN_ID"
        
        echo "Copying artifacts from run: $RUN_ID"
        
        # Copy MLflow artifacts
        if [ -d "mlruns" ]; then
          cp -r mlruns ../artifacts/
        fi
        
        # Copy database
        if [ -f "mlflow.db" ]; then
          cp mlflow.db ../artifacts/
        fi
        
        # Copy any generated plots or additional files
        if [ -f "confusion_matrix.png" ]; then
          cp confusion_matrix.png ../artifacts/
        fi
        
        if [ -f "feature_importance.png" ]; then
          cp feature_importance.png ../artifacts/
        fi
        
        # Create a summary file
        echo "MLflow Run Summary" > ../artifacts/run_summary.txt
        echo "==================" >> ../artifacts/run_summary.txt
        echo "Run ID: $RUN_ID" >> ../artifacts/run_summary.txt
        echo "Timestamp: $(date)" >> ../artifacts/run_summary.txt
        echo "Commit SHA: ${{ github.sha }}" >> ../artifacts/run_summary.txt
        echo "Docker Image: $DOCKER_HUB_USERNAME/$DOCKER_IMAGE_NAME:${{ github.sha }}" >> ../artifacts/run_summary.txt
        echo "MLflow Tracking URI: $MLFLOW_TRACKING_URI" >> ../artifacts/run_summary.txt
        
        # List artifacts
        echo "Generated artifacts:" >> ../artifacts/run_summary.txt
        ls -la ../artifacts/ >> ../artifacts/run_summary.txt
        
    - name: Upload Artifacts to GitHub
      uses: actions/upload-artifact@v4
      with:
        name: mlflow-artifacts-${{ github.sha }}
        path: artifacts/
        retention-days: 30
        
    - name: Commit and Push Artifacts (if on main branch)
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      shell: bash -l {0}
      run: |
        # Configure git with token-based authentication
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
        
        # Set up authentication using token
        git config --global url."https://${{ github.token }}@github.com/".insteadOf "https://github.com/"
        
        # Navigate to workspace root
        cd ${{ github.workspace }}
        
        # Check if artifacts directory exists
        if [ ! -d "artifacts" ]; then
          echo "‚ùå No artifacts directory found"
          exit 1
        fi
        
        # Create or switch to artifacts branch
        git fetch origin || true
        if git ls-remote --heads origin artifacts | grep -q refs/heads/artifacts; then
          echo "üìÅ Artifacts branch exists, checking out..."
          git checkout artifacts
          git pull origin artifacts
        else
          echo "üÜï Creating new artifacts branch..."
          git checkout --orphan artifacts
          git rm -rf . || true
        fi
        
        # Copy artifacts with better error handling
        if [ -d "artifacts" ]; then
          cp -r artifacts/* . 2>/dev/null || echo "‚ö†Ô∏è  Some artifacts may not have been copied"
        fi
        
        # Add timestamp directory
        TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
        mkdir -p "runs/$TIMESTAMP"
        if [ -d "artifacts" ]; then
          cp -r artifacts/* "runs/$TIMESTAMP/" 2>/dev/null || echo "‚ö†Ô∏è  Some artifacts may not have been copied to timestamp directory"
        fi
        
        # Stage all changes
        git add . || echo "‚ö†Ô∏è  No changes to add"
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "üìù No changes to commit"
        else
          echo "üìù Committing artifacts..."
          git commit -m "Add MLflow artifacts from run ${{ github.sha }}" -m "Timestamp: $(date)" -m "Workflow: ${{ github.workflow }}" -m "Run ID: ${{ github.run_id }}"
          
          echo "üì§ Pushing to artifacts branch..."
          git push origin artifacts
        fi
        
    - name: Update Docker Hub Link
      shell: bash -l {0}
      run: |
        # Update the docker-hub-link.txt with the actual pushed image
        echo "https://hub.docker.com/repository/docker/$DOCKER_HUB_USERNAME/$DOCKER_IMAGE_NAME" > MLProject/docker-hub-link.txt
        echo "Latest image: $DOCKER_HUB_USERNAME/$DOCKER_IMAGE_NAME:latest" >> MLProject/docker-hub-link.txt
        echo "SHA image: $DOCKER_HUB_USERNAME/$DOCKER_IMAGE_NAME:${{ github.sha }}" >> MLProject/docker-hub-link.txt
        echo "Build date: $(date)" >> MLProject/docker-hub-link.txt
        echo "MLflow model URI: runs:/$(grep -o "Training completed! MLflow Run ID: [a-zA-Z0-9]*" MLProject/training.log | cut -d ' ' -f 6 || echo "unknown")/model" >> MLProject/docker-hub-link.txt
        
    - name: Build and Push Docker Image using MLflow
      working-directory: ${{ github.workspace }}/MLProject
      shell: bash -l {0}
      run: |
        # Set the tracking URI for this step
        MLFLOW_DB_PATH="$(pwd)/mlflow.db"
        export MLFLOW_TRACKING_URI="sqlite:///$MLFLOW_DB_PATH"
        
        # Get the run ID from the previous step
        RUN_ID=$(grep -o "Training completed! MLflow Run ID: [a-zA-Z0-9]*" training.log | cut -d ' ' -f 6)
        
        if [ -z "$RUN_ID" ]; then
          echo "‚ùå Error: No Run ID found for Docker build"
          exit 1
        fi
        
        echo "üê≥ Building Docker image for Run ID: $RUN_ID"
        
        # Build Docker image using MLflow
        mlflow models build-docker \
          --model-uri "runs:/$RUN_ID/model" \
          --name "$DOCKER_HUB_USERNAME/$DOCKER_IMAGE_NAME" \
          --install-mlflow
        
        # Login to Docker Hub
        echo "üîê Logging in to Docker Hub..."
        echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login --username "$DOCKER_HUB_USERNAME" --password-stdin
        
        # Tag and push the image with latest tag
        echo "üè∑Ô∏è Tagging Docker image..."
        docker tag "$DOCKER_HUB_USERNAME/$DOCKER_IMAGE_NAME:latest" "$DOCKER_HUB_USERNAME/$DOCKER_IMAGE_NAME:latest"
        docker tag "$DOCKER_HUB_USERNAME/$DOCKER_IMAGE_NAME:latest" "$DOCKER_HUB_USERNAME/$DOCKER_IMAGE_NAME:${{ github.sha }}"
        
        # Push both tags
        echo "üì§ Pushing Docker images to Docker Hub..."
        docker push "$DOCKER_HUB_USERNAME/$DOCKER_IMAGE_NAME:latest"
        docker push "$DOCKER_HUB_USERNAME/$DOCKER_IMAGE_NAME:${{ github.sha }}"
        
        # Verify push
        echo "‚úÖ Docker images pushed successfully:"
        echo "  - $DOCKER_HUB_USERNAME/$DOCKER_IMAGE_NAME:latest"
        echo "  - $DOCKER_HUB_USERNAME/$DOCKER_IMAGE_NAME:${{ github.sha }}"
        
        # Logout from Docker Hub
        docker logout
        
    - name: Display Run Summary
      shell: bash -l {0}
      run: |
        echo "üéâ MLflow CI/CD Pipeline Completed Successfully!"
        echo "=============================================="
        echo "‚úÖ Model training completed"
        echo "‚úÖ Docker image built using MLflow and pushed to Docker Hub"
        echo "‚úÖ Artifacts saved to GitHub repository"
        echo ""
        echo "üìä Run Details:"
        echo "Docker Images:"
        echo "  - Latest: $DOCKER_HUB_USERNAME/$DOCKER_IMAGE_NAME:latest"
        echo "  - SHA: $DOCKER_HUB_USERNAME/$DOCKER_IMAGE_NAME:${{ github.sha }}"
        echo "Commit SHA: ${{ github.sha }}"
        echo "Workflow URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        echo ""
        echo "üîó Resources:"
        echo "- Docker Hub: https://hub.docker.com/repository/docker/$DOCKER_HUB_USERNAME/$DOCKER_IMAGE_NAME"
        echo "- Artifacts: Available in GitHub Actions artifacts and 'artifacts' branch"
        echo "- MLflow Model: Check artifacts for MLflow tracking database"