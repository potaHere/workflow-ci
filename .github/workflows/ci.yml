name: MLflow Model Training and Deployment

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      n_estimators:
        description: 'Number of estimators for Random Forest'
        required: false
        default: '100'
      max_depth:
        description: 'Maximum depth of trees'
        required: false
        default: '20'

env:
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
  MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}

jobs:
  model-training:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
        
    - name: Install MLflow and dependencies
      run: |
        pip install mlflow>=2.0.0
        pip install conda-pack
        pip install docker
          - name: Set up Conda
      uses: conda-incubator/setup-miniconda@v3
      with:
        auto-update-conda: true
        python-version: '3.10'
        conda-remove-defaults: true
        
    - name: Create conda environment
      working-directory: ./MLProject
      run: |
        conda env create -f conda.yaml --force
        
    - name: Run MLflow Project
      working-directory: ./MLProject
      shell: bash -l {0}
      run: |
        # Activate environment
        conda activate avocado_ripeness_env
        
        # Set default parameters if not provided via workflow_dispatch
        N_ESTIMATORS=${{ github.event.inputs.n_estimators || '100' }}
        MAX_DEPTH=${{ github.event.inputs.max_depth || '20' }}
        
        echo "Training model with parameters:"
        echo "  - n_estimators: $N_ESTIMATORS"
        echo "  - max_depth: $MAX_DEPTH"
        
        # Run MLflow project using python directly
        python modelling.py \
          --n_estimators $N_ESTIMATORS \
          --max_depth $MAX_DEPTH \
          --min_samples_split 5 \
          --min_samples_leaf 2
            - name: Generate model artifacts report
      working-directory: ./MLProject
      shell: bash -l {0}
      run: |
        conda activate avocado_ripeness_env
        
        echo "# Model Training Report" > model_report.md
        echo "Generated on: $(date)" >> model_report.md
        echo "" >> model_report.md
        echo "## Parameters Used:" >> model_report.md
        echo "- n_estimators: ${{ github.event.inputs.n_estimators || '100' }}" >> model_report.md
        echo "- max_depth: ${{ github.event.inputs.max_depth || '20' }}" >> model_report.md
        echo "- min_samples_split: 5" >> model_report.md
        echo "- min_samples_leaf: 2" >> model_report.md
        echo "" >> model_report.md
        echo "## Files Generated:" >> model_report.md
        ls -la *.png *.joblib 2>/dev/null | while read line; do echo "- $line" >> model_report.md; done || echo "- No artifacts found" >> model_report.md
        
    - name: Store model artifacts
      uses: actions/upload-artifact@v4
      with:
        name: model-artifacts-${{ github.run_number }}
        path: |
          MLProject/*.png
          MLProject/*.joblib
          MLProject/model_report.md
        retention-days: 30
        
  docker-build-deploy:
    needs: model-training
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install MLflow
      run: |
        pip install mlflow>=2.0.0
        pip install docker
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_PASSWORD }}
        
    - name: Download model artifacts
      uses: actions/download-artifact@v4
      with:
        name: model-artifacts-${{ github.run_number }}
        path: ./MLProject/
        
    - name: Build Docker image with MLflow
      working-directory: ./MLProject
      run: |
        # Create a simple model serving script for Docker
        cat > serve_model.py << 'EOF'
        import mlflow
        import mlflow.sklearn
        import pandas as pd
        import joblib
        import os
        from flask import Flask, request, jsonify
        
        app = Flask(__name__)
        
        # Load the model
        model_path = "random_forest_model.joblib"
        if os.path.exists(model_path):
            model = joblib.load(model_path)
        else:
            model = None
        
        @app.route('/predict', methods=['POST'])
        def predict():
            if model is None:
                return jsonify({"error": "Model not loaded"}), 500
                
            try:
                data = request.json
                df = pd.DataFrame([data])
                prediction = model.predict(df)
                probability = model.predict_proba(df)
                
                return jsonify({
                    "prediction": prediction[0],
                    "probability": probability[0].tolist()
                })
            except Exception as e:
                return jsonify({"error": str(e)}), 400
        
        @app.route('/health', methods=['GET'])
        def health():
            return jsonify({"status": "healthy", "model_loaded": model is not None})
        
        if __name__ == '__main__':
            app.run(host='0.0.0.0', port=5000)
        EOF
        
        # Create Dockerfile
        cat > Dockerfile << 'EOF'
        FROM python:3.10-slim
        
        WORKDIR /app
        
        COPY conda.yaml .
        COPY *.py .
        COPY *.joblib .
        COPY *.csv .
        
        RUN pip install mlflow>=2.0.0 flask pandas scikit-learn joblib numpy
        
        EXPOSE 5000
        
        CMD ["python", "serve_model.py"]
        EOF
        
        # Build and push Docker image
        docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/avocado-ripeness-model:latest .
        docker push ${{ secrets.DOCKER_HUB_USERNAME }}/avocado-ripeness-model:latest
        
        # Also tag with build number
        docker tag ${{ secrets.DOCKER_HUB_USERNAME }}/avocado-ripeness-model:latest \
                   ${{ secrets.DOCKER_HUB_USERNAME }}/avocado-ripeness-model:build-${{ github.run_number }}
        docker push ${{ secrets.DOCKER_HUB_USERNAME }}/avocado-ripeness-model:build-${{ github.run_number }}
        
    - name: Update Docker Hub link
      run: |
        echo "https://hub.docker.com/r/${{ secrets.DOCKER_HUB_USERNAME }}/avocado-ripeness-model" > MLProject/docker-hub-link.txt
        echo "Latest build: build-${{ github.run_number }}" >> MLProject/docker-hub-link.txt
        
    - name: Commit updated Docker link
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add MLProject/docker-hub-link.txt
        git diff --staged --quiet || git commit -m "Update Docker Hub link with build-${{ github.run_number }}"
        git push || true
        
  create-release:
    needs: [model-training, docker-build-deploy]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download model artifacts
      uses: actions/download-artifact@v4
      with:
        name: model-artifacts-${{ github.run_number }}
        path: ./artifacts/
        
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: model-v${{ github.run_number }}
        release_name: Model Release v${{ github.run_number }}
        body: |
          ## Avocado Ripeness Classification Model
          
          **Build:** ${{ github.run_number }}
          **Date:** $(date)
          **Commit:** ${{ github.sha }}
          
          ### Model Parameters:
          - n_estimators: ${{ github.event.inputs.n_estimators || '100' }}
          - max_depth: ${{ github.event.inputs.max_depth || '20' }}
          - min_samples_split: 5
          - min_samples_leaf: 2
          
          ### Docker Image:
          ```bash
          docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/avocado-ripeness-model:build-${{ github.run_number }}
          ```
          
          ### Usage:
          ```bash
          # Run the model server
          docker run -p 5000:5000 ${{ secrets.DOCKER_HUB_USERNAME }}/avocado-ripeness-model:build-${{ github.run_number }}
          
          # Test prediction
          curl -X POST http://localhost:5000/predict \
            -H "Content-Type: application/json" \
            -d '{"feature1": value1, "feature2": value2, ...}'
          ```
        draft: false
        prerelease: false